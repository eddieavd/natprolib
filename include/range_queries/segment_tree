// vim: set ft=cpp:
//
//
//      natprolib
//      segment_tree
//

#pragma once


#include <algorithm>

#include <mem.hpp>
#include <util.hpp>
#include <_alloc/alloc_traits.hpp>
#include <_iter/iter_traits.hpp>
#include <_iter/move_iterator.hpp>
#include <_traits/npl_traits.hpp>
#include <iterator.hpp>
#include <container/split_buffer>

#include <container/vector>


namespace npl
{


template< typename T, typename Allocator >
class _segment_tree_base;

template< typename T, auto PB, typename Allocator > /* ,
          typename = enable_if_t< is_default_constructible_v< T > > > */
class segment_tree;


struct segment_tree_iterator_tag : public random_access_iterator_tag {};

template< typename T >
struct is_segment_tree_iterator : public has_iterator_category_convertible_to< iterator_traits< T >, segment_tree_iterator_tag > {};

template< typename T >
inline constexpr bool is_segment_tree_iterator_v = is_segment_tree_iterator< T >::value;


template< typename T, typename Allocator >
class _segment_tree_base
        : protected _vector_base< T, Allocator >
{
protected:
        template< bool C, typename T_ = T, typename Allocator_ = Allocator >
        class _segment_tree_iterator
                : public iterator< C, T_ >
        {
                friend class _segment_tree_iterator< !C, T_, Allocator_ >;
        public:
                using             _base = iterator< C, T_ >;
                using     _alloc_traits = allocator_traits< Allocator_ >;
                using   difference_type = typename _alloc_traits::difference_type;
                using iterator_category = segment_tree_iterator_tag;

                explicit constexpr _segment_tree_iterator ( typename _base::pointer _ptr_ ) : _base( _ptr_ ) {}
        };

        using          _base = _vector_base< T, Allocator >;
        using       iterator = _segment_tree_iterator< false >;
        using const_iterator = _segment_tree_iterator<  true >;
        using allocator_type = typename _base::allocator_type;

        _segment_tree_base (                                 ) noexcept( is_nothrow_default_constructible_v< allocator_type > ) : _base() {}
        _segment_tree_base ( allocator_type const &  _alloc_ )          : _base (           _alloc_   ) {}
        _segment_tree_base ( allocator_type       && _alloc_ ) noexcept : _base ( NPL_MOVE( _alloc_ ) ) {}
};

template< typename T >
auto _default_parent_builder
{
        []( [[ maybe_unused ]] T const & lhs, [[ maybe_unused ]] T const & rhs )
        {
                return T();
        }
};

template< typename T, auto PB = _default_parent_builder< T >, typename Allocator = default_allocator_t< T > > /* , typename ENABLED > */
class segment_tree
        : _segment_tree_base< T, Allocator >
{
private:
        using                        _self =  segment_tree;
        using                        _base = _segment_tree_base< T, Allocator >;
        using      _default_allocator_type = default_allocator_t< T >;
        using _default_parent_builder_type = decltype( _default_parent_builder< T > );
public:
        using          value_type = T;
        using      allocator_type = Allocator;
        using       _alloc_traits = typename _base::  _alloc_traits;
        using           reference = typename _base::      reference;
        using     const_reference = typename _base::const_reference;
        using           size_type = typename _base::      size_type;
        using     difference_type = typename _base::difference_type;
        using             pointer = typename _base::        pointer;
        using       const_pointer = typename _base::  const_pointer;
        using parent_builder_type = decltype( PB );

        using               iterator = typename _base::      iterator;
        using         const_iterator = typename _base::const_iterator;
        using       reverse_iterator = reverse_iter<       iterator >;
        using const_reverse_iterator = reverse_iter< const_iterator >;

        parent_builder_type parent_builder_{ PB };

        static_assert( ( is_same_v< typename allocator_type::value_type, value_type > ),
                        "natprolib::segment_tree: allocator_type::value_type != self::value_type" );

        static_assert( ( is_same_v< T, remove_cvref_t< decltype( parent_builder_( T(), T() ) ) > > ),
                        "natprolib::segment_tree: bad parent builder" );

        segment_tree () noexcept( is_nothrow_default_constructible_v< allocator_type > ) {}

        explicit segment_tree ( allocator_type const & _alloc_ ) noexcept : _base( _alloc_ ) {}

        explicit segment_tree ( size_type const _count_                                 );
        explicit segment_tree ( size_type const _count_, allocator_type const & _alloc_ );

        segment_tree ( size_type const _count_, value_type const & _val_                                 );
        segment_tree ( size_type const _count_, value_type const & _val_, allocator_type const & _alloc_ );

        template< typename SegtreeIterator >
        segment_tree ( SegtreeIterator _first_,
                        enable_if_t
                        <
                                is_segment_tree_iterator_v< SegtreeIterator > &&
                                is_constructible_v
                                <
                                        value_type,
                                        typename iterator_traits< SegtreeIterator >::reference
                                >,
                                SegtreeIterator
                        > _last_ );

        template< typename SegtreeIterator >
        segment_tree ( SegtreeIterator _first_, SegtreeIterator _last_, allocator_type const & _alloc_,
                        enable_if_t
                        <
                                is_segment_tree_iterator_v< SegtreeIterator > &&
                                is_constructible_v
                                <
                                        value_type,
                                        typename iterator_traits< SegtreeIterator >::reference
                                >
                        > * = 0 );

#if 0
        template< typename InputIterator >
        segment_tree ( InputIterator _first_,
                        enable_if_t
                        <
                                 is_input_iterator_v  < InputIterator > &&
                                !is_at_least_forward_iterator_v< InputIterator > &&
                                !is_segment_tree_iterator_v < InputIterator > &&
                                is_constructible_v
                                <
                                        value_type,
                                        typename iterator_traits< InputIterator >::reference
                                >,
                                InputIterator
                        > _last_ );

        template< typename InputIterator >
        segment_tree ( InputIterator _first_, InputIterator _last_, allocator_type const & _alloc_,
                        enable_if_t
                        <
                                 is_input_iterator_v  < InputIterator > &&
                                !is_at_least_forward_iterator_v< InputIterator > &&
                                !is_segment_tree_iterator_v < InputIterator > &&
                                is_constructible_v
                                <
                                        value_type,
                                        typename iterator_traits< InputIterator >::reference
                                >
                        > * = 0 );
#endif

        template< typename ForwardIterator >
        segment_tree ( ForwardIterator _first_,
                        enable_if_t
                        <
                                 is_at_least_forward_iterator_v< ForwardIterator > &&
                                !is_segment_tree_iterator_v < ForwardIterator > &&
                                is_constructible_v
                                <
                                        value_type,
                                        typename iterator_traits< ForwardIterator >::reference
                                >,
                                ForwardIterator
                        > _last_ );

        template< typename ForwardIterator >
        segment_tree ( ForwardIterator _first_, ForwardIterator _last_, allocator_type const & _alloc_,
                        enable_if_t
                        <
                                 is_at_least_forward_iterator_v< ForwardIterator > &&
                                !is_segment_tree_iterator_v < ForwardIterator > &&
                                is_constructible_v
                                <
                                        value_type,
                                        typename iterator_traits< ForwardIterator >::reference
                                >
                        > * = 0 );

        ~segment_tree ()
        {
                _annotate_delete();
        }

        segment_tree ( segment_tree const & _other_                                              );
        segment_tree ( segment_tree const & _other_, type_identity< allocator_type > const & _alloc_ );

        segment_tree & operator= ( segment_tree const & _other_ );

        segment_tree ( segment_tree && _other_                                              ) noexcept;
        segment_tree ( segment_tree && _other_, type_identity< allocator_type > const & _alloc_ );

        segment_tree & operator= ( segment_tree && _other_ )
                noexcept( ( noexcept_move_assign_container_v< allocator_type, _alloc_traits > ) );

        segment_tree ( std::initializer_list< value_type > _list_                                 );
        segment_tree ( std::initializer_list< value_type > _list_, allocator_type const & _alloc_ );

        segment_tree & operator= ( std::initializer_list< value_type > _list_ )
        { assign( _list_.begin(), _list_.end() ); return *this; }

        template< typename SegtreeIterator >
        enable_if_t
        <
                is_segment_tree_iterator_v< SegtreeIterator > &&
                is_constructible_v
                <
                        value_type,
                        typename iterator_traits< SegtreeIterator >::reference
                >,
                void
        >
        assign ( SegtreeIterator _first_, SegtreeIterator _last_ );

#if 0
        template< typename InputIterator >
        enable_if_t
        <
                 is_input_iterator_v  < InputIterator > &&
                !is_at_least_forward_iterator_v< InputIterator > &&
                !is_segment_tree_iterator_v < InputIterator > &&
                is_constructible_v
                <
                        value_type,
                        typename iterator_traits< InputIterator >::reference
                >,
                void
        >
        assign ( InputIterator _first_, InputIterator _last_ );
#endif

        template< typename ForwardIterator >
        enable_if_t
        <
                 is_at_least_forward_iterator_v< ForwardIterator > &&
                !is_segment_tree_iterator_v < ForwardIterator > &&
                is_constructible_v
                <
                        value_type,
                        typename iterator_traits< ForwardIterator >::reference
                >,
                void
        >
        assign ( ForwardIterator _first_, ForwardIterator _last_ );

        void assign ( std::initializer_list< value_type > _list_ )
        { assign( _list_.begin(), _list_.end() ); }

        allocator_type get_allocator () const noexcept
        { return this->_alloc(); }

        parent_builder_type get_parent_builder () const noexcept
        { return parent_builder_; }

              iterator real_begin ()       noexcept;
              iterator      begin ()       noexcept;
              iterator        end ()       noexcept;
        const_iterator real_begin () const noexcept;
        const_iterator      begin () const noexcept;
        const_iterator        end () const noexcept;

        reverse_iterator rbegin () noexcept
        { return reverse_iterator( end() ); }

        reverse_iterator rend () noexcept
        { return reverse_iterator( begin() ); }

        const_reverse_iterator rbegin () const noexcept
        { return const_reverse_iterator( end() ); }

        const_reverse_iterator rend () const noexcept
        { return const_reverse_iterator( begin() ); }

        const_iterator cbegin () const noexcept
        { return begin(); }

        const_iterator cend () const noexcept
        { return end(); }

        const_reverse_iterator crbegin () const noexcept
        { return rbegin(); }

        const_reverse_iterator crend () const noexcept
        { return rend(); }

        NPL_NODISCARD size_type real_size () const noexcept
        { return static_cast< size_type >( this->end_ - this->begin_ ); }

        NPL_NODISCARD size_type capacity () const noexcept
        { return _base::capacity(); }

        NPL_NODISCARD size_type size () const noexcept
        { return capacity() / 2; }

        NPL_NODISCARD bool empty () const noexcept
        { return this->begin_ == this->end_; }

        size_type max_size () const noexcept;

        void reserve ( size_type const _size_ );

        void shrink_to_fit () noexcept;

        NPL_ALWAYS_INLINE       reference operator[] ( size_type const _index_ )       noexcept;
        NPL_ALWAYS_INLINE const_reference operator[] ( size_type const _index_ ) const noexcept;

        bool   operator== ( segment_tree const & _rhs_ ) const noexcept;
        bool   operator!= ( segment_tree const & _rhs_ ) const noexcept;
        auto   operator+  ( segment_tree const & _rhs_ ) const         ;
        auto & operator+= ( segment_tree const & _rhs_ )       noexcept;
        auto   operator-  ( segment_tree const & _rhs_ ) const         ;
        auto & operator-= ( segment_tree const & _rhs_ )       noexcept;

        void update ( size_type const _position_, const_reference _val_ ) { _update( _position_, _val_ ); }
        void update ( iterator        _position_, const_reference _val_ ) { _update( _position_, _val_ ); }

        void update ( size_type const _position_, value_type && _val_ ) noexcept { _update( _position_, NPL_MOVE( _val_ ) ); }
        void update ( iterator        _position_, value_type && _val_ ) noexcept { _update( _position_, NPL_MOVE( _val_ ) ); }

        template< typename... Args >
        void update ( size_type const _position_, Args... _args_ ) { _update( _position_, NPL_FWD( _args_ )... ); }
        template< typename... Args >
        void update ( iterator        _position_, Args... _args_ ) { _update( _position_, NPL_FWD( _args_ )... ); }

        NPL_ALWAYS_INLINE       reference at ( size_type const _index_ )       noexcept;
        NPL_ALWAYS_INLINE const_reference at ( size_type const _index_ ) const noexcept;

        NPL_ALWAYS_INLINE value_type element_at ( size_type const _index_ ) const noexcept;

        NPL_ALWAYS_INLINE NPL_FLATTEN value_type range (                              ) const noexcept;
        NPL_ALWAYS_INLINE             value_type range ( size_type _x_, size_type _y_ ) const noexcept;

          //////////////////
         // 2D overloads //
        //////////////////

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_2d_container_base_t< U > const &
        at ( size_type const _x_, size_type const _y_ ) const noexcept
        {
                return at( _x_ ).at( _y_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_2d_container_base_t< U > &
        at ( size_type const _x_, size_type const _y_ ) noexcept
        {
                return at( _x_ ).at( _y_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_2d_range_container_base_t< U >
        element_at ( size_type const _x_, size_type const _y_ ) const noexcept
        {
                return element_at( _x_ ).element_at( _y_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_2d_range_container_base_t< U >
        range ( size_type const _x1_, size_type const _y1_, size_type const _x2_, size_type const _y2_ ) const noexcept
        {
                return range( _x1_, _x2_ ).range( _y1_, _y2_ );
        }

        //////////////////

          //////////////////
         // 3D overloads //
        //////////////////

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_3d_container_base_t< U > const &
        at ( size_type const _x_, size_type const _y_, size_type const _z_ ) const noexcept
        {
                return at( _x_ ).at( _y_ ).at( _z_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_3d_container_base_t< U > &
        at ( size_type const _x_, size_type const _y_, size_type const _z_ ) noexcept
        {
                return at( _x_ ).at( _y_ ).at( _z_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_3d_range_container_base_t< U >
        element_at ( size_type const _x_, size_type const _y_, size_type const _z_ ) const noexcept
        {
                return element_at( _x_ ).element_at( _y_, _z_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        enable_3d_range_container_base_t< U >
        range ( size_type const _x1_, size_type const _y1_, size_type const _z1_,
                size_type const _x2_, size_type const _y2_, size_type const _z2_ )
        {
                return range( _x1_, _x2_ ).range( _y1_, _z1_, _y2_, _z2_ );
        }

        //////////////////

        reference front () noexcept
        {
                NPL_ASSERT( !empty(), "segment_tree::front: called on empty segment tree" );

                return this->begin_[ size() ];
        }

        const_reference front () const noexcept
        {
                NPL_ASSERT( !empty(), "segment_tree::front: called on empty segment tree" );

                return this->begin_[ size() ];
        }

        const_reference cfront () const noexcept
        {
                return front();
        }

        reference back () noexcept
        {
                NPL_ASSERT( !empty(), "segment_tree::back: called on empty segment tree" );

                return this->begin_[ real_size() - 1 ];
        }

        const_reference back () const noexcept
        {
                NPL_ASSERT( !empty(), "segment_tree::back: called on empty segment tree" );

                return this->begin_[ real_size() - 1 ];
        }

        const_reference cback () const noexcept
        {
                return back();
        }

        value_type * data () noexcept
        { return mem::to_address( this->begin_ ); }

        value_type const * data () const noexcept
        { return mem::to_address( this->begin_ ); }

        template< typename Arg >
        void _emplace_back ( Arg&& _arg_ )
        {
                emplace_back( NPL_FWD( _arg_ ) );
        }

        void push_back ( const_reference _val_ );

        template< typename... Args >
        void push_back ( const_reference _val_, Args... _args_ )
        {
                push_back( _val_ );
                push_back( _args_... );
        }

        void push_back ( value_type && _val_ );

        template< typename... Args >
        void push_back ( value_type && _val_, Args... _args_ )
        {
                push_back( _val_ );
                push_back( _args_... );
        }

        template< typename... Args >
        reference emplace_back ( Args&&... _args_ );

        void pop_back ();

        iterator insert ( const_iterator _position_, const_reference    _val_ );
        iterator insert ( const_iterator _position_, value_type      && _val_ );

        template< typename... Args >
        iterator emplace ( const_iterator _position_, Args&&... _args_ );

        iterator insert ( const_iterator _position_, size_type const _count_, const_reference _val_ );

        template< typename SegtreeIterator >
        enable_if_t
        <
                is_segment_tree_iterator_v< SegtreeIterator > &&
                is_constructible_v
                <
                        value_type,
                        typename iterator_traits< SegtreeIterator >::reference
                >,
                iterator
        >
        insert ( const_iterator _position_, SegtreeIterator _first_, SegtreeIterator _last_ );

        template< typename InputIterator >
        enable_if_t
        <
                 is_at_least_input_iterator_v  < InputIterator > &&
                !is_at_least_forward_iterator_v< InputIterator > &&
                !is_segment_tree_iterator_v < InputIterator > &&
                is_constructible_v
                <
                        value_type,
                        typename iterator_traits< InputIterator >::reference
                >,
                iterator
        >
        insert ( const_iterator _position_, InputIterator _first_, InputIterator _last_ );

        template< typename ForwardIterator >
        enable_if_t
        <
                is_at_least_forward_iterator_v< ForwardIterator > &&
                !is_segment_tree_iterator_v< ForwardIterator > &&
                is_constructible_v
                <
                        value_type,
                        typename iterator_traits< ForwardIterator >::reference
                >,
                iterator
        >
        insert ( const_iterator _position_, ForwardIterator _first_, ForwardIterator _last_ );

        iterator insert ( const_iterator _position_, std::initializer_list< value_type > _list_ )
        { return insert( _position_, _list_.begin(), _list_.end() ); }

        iterator erase ( const_iterator _position_                        );
        iterator erase ( const_iterator    _first_, const_iterator _last_ );

        void resize ( size_type const _count_                        );
        void resize ( size_type const _count_, const_reference _val_ );

        void swap ( segment_tree & ) noexcept;

        void clear () noexcept
        {
                size_type old_size = real_size();
                _base::clear();
                _annotate_shrink( old_size );
                _invalidate_all_iterators();
        }

        bool _invariants () const noexcept;

        bool _dereferenceable ( const_iterator const * _i_                ) const noexcept;
        bool _decrementable   ( const_iterator const * _i_                ) const noexcept;
        bool _addable         ( const_iterator const * _i_, ptrdiff_t _n_ ) const noexcept;
        bool _subscriptable   ( const_iterator const * _i_, ptrdiff_t _n_ ) const noexcept;

private:
        void _invalidate_all_iterators  ();
        void _invalidate_iterators_past ( pointer _new_last_ );

        void _vallocate   ( size_type const _count_ );
        void _vdeallocate (                         ) noexcept;

        size_type _msb           ( size_type       _val_ ) const noexcept;
        size_type _round_to_pow2 ( size_type const _size_ ) const noexcept;

        size_type _recommend ( size_type const _new_size_ ) const noexcept;

        void _rebuild_tree () noexcept;

        void _update ( size_type _position_, const_reference _val_ );
        void _update ( iterator  _position_, const_reference _val_ );

        void _update ( size_type _position_, value_type && _val_ ) noexcept;
        void _update ( iterator  _position_, value_type && _val_ ) noexcept;

        template< typename... Args >
        void _update ( size_type _position_, Args... _args_ );

        template< typename... Args >
        void _update ( iterator _position_, Args... _args_ );

        void _trim_tree   ( size_type const _new_size_ ) noexcept;
        void _expand_tree ( size_type const _new_size_ );

        void _construct_at_end ( size_type const _count_                        );
        void _construct_at_end ( size_type const _count_, const_reference _val_ );

        template< typename SegtreeIterator >
        enable_if_t
        <
                is_segment_tree_iterator_v< SegtreeIterator >,
                void
        >
        _construct_at_end ( SegtreeIterator _first_, SegtreeIterator _last_, size_type const _count_ );

        template< typename InputIterator >
        enable_if_t
        <
                 is_at_least_input_iterator_v  < InputIterator > &&
                !is_at_least_forward_iterator_v< InputIterator > &&
                !is_segment_tree_iterator_v < InputIterator >,
                void
        >
        _construct_at_end ( InputIterator _first_, InputIterator _last_, size_type const _count_ );

        template< typename ForwardIterator >
        enable_if_t
        <
                 is_at_least_forward_iterator_v< ForwardIterator > &&
                !is_segment_tree_iterator_v < ForwardIterator >,
                void
        >
        _construct_at_end ( ForwardIterator _first_, ForwardIterator _last_, size_type const _count_ );

        void _append ( size_type const _count_                        );
        void _append ( size_type const _count_, const_reference _val_ );

              iterator _make_iter (       pointer _ptr_ )       noexcept;
        const_iterator _make_iter ( const_pointer _ptr_ ) const noexcept;

        void    _swap_out_buffer          ( split_buffer< value_type, allocator_type & > & _buffer_                ) noexcept;
        void    _swap_out_circular_buffer ( split_buffer< value_type, allocator_type & > & _buffer_                );
        pointer _swap_out_circular_buffer ( split_buffer< value_type, allocator_type & > & _buffer_, pointer _ptr_ );

        void _move_range ( pointer _from_s_, pointer _from_e_, pointer _to_ );

        void _move_assign ( segment_tree & _other_, true_type  ) noexcept( is_nothrow_move_assignable_v< allocator_type > );
        void _move_assign ( segment_tree & _other_, false_type ) noexcept( _alloc_traits::is_always_equal::value );

        void _destruct_at_end ( pointer _new_last_ ) noexcept
        {
                _invalidate_iterators_past( _new_last_ );

                size_type old_size = real_size();
                _base::_destruct_at_end( _new_last_ );
                _annotate_shrink( old_size );
        }

        template< typename U >
        inline void _push_back_slow_path ( U && _val_ );

        template< typename... Args >
        inline void _emplace_back_slow_path ( Args&&... _args_ );

#ifdef NPL_HAS_ASAN
        void _annotate_contiguous_container ( void const * _beg_, void const * _end_,
                                              void const * _old_mid_,
                                              void const * _new_mid_ ) const
        {
                if( _beg_ && is_same_v< allocator_type, _default_allocator_type > )
                {
                        __sanitizer_annotate_contiguous_container( _beg_, _end_, _old_mid_, _new_mid_ );
                }
        }
#else
        void _annotate_contiguous_container ( void const *, void const *, void const *, void const * ) const noexcept {}
#endif
        void _annotate_new ( size_type _current_size_ ) const noexcept
        {
                _annotate_contiguous_container( data(), data() + capacity(),
                                                data() + capacity(), data() + _current_size_ );
        }

        void _annotate_delete () const noexcept
        {
                _annotate_contiguous_container( data(), data() + capacity(),
                                                data() + real_size(), data() + capacity() );
        }

        void _annotate_increase ( size_type _n_ ) const noexcept
        {
                _annotate_contiguous_container( data(), data() + capacity(),
                                                data() + real_size(), data() + real_size() + _n_ );
        }

        void _annotate_shrink ( size_type _old_size_ ) const noexcept
        {
                _annotate_contiguous_container( data(), data() + capacity(),
                                                data() + _old_size_, data() + real_size() );
        }

        struct _construct_transaction
        {
                explicit _construct_transaction ( segment_tree & _segtree_, size_type const _count_ )
                        : segtree_ ( _segtree_ ),
                          position_( _segtree_.end_ ),
                          new_end_ ( _segtree_.end_ + _count_ )
                {
#ifdef NPL_HAS_ASAN
                        segtree_._annotate_increase( _count_ );
#endif
                }

                ~_construct_transaction ()
                {
                        segtree_.end_ = position_;
#ifdef NPL_HAS_ASAN
                        if( position_ != new_end_ )
                        {
                                segtree_._annotate_shrink( new_end_ - segtree_.begin_ );
                        }
#endif
                }

                segment_tree &      segtree_ ;
                pointer             position_;
                const_pointer const new_end_ ;

        private:
                _construct_transaction             ( _construct_transaction const & ) = delete;
                _construct_transaction & operator= ( _construct_transaction const & ) = delete;
        };

        template< typename... Args >
        void _construct_one_at_end ( Args... _args_ )
        {
                _construct_transaction tx( *this, 1 );

                _alloc_traits::construct( this->_alloc(), mem::to_address( tx.position_ ), NPL_FWD( _args_ )... );
                ++tx.position_;
        }
};


template< typename T,
          auto     PB     = _default_parent_builder< T >,
          typename Alloc  = allocator< T >,
          typename        = enable_if< is_allocator< Alloc >::value >,
          typename Traits = allocator_traits< Alloc >
        >
segment_tree ( typename Traits::size_type const, T )
        -> segment_tree< T, PB, Alloc >;

template< typename T,
          auto     PB     = _default_parent_builder< T >,
          typename Alloc,
          typename        = enable_if< is_allocator< Alloc >::value >,
          typename Traits = allocator_traits< Alloc >
        >
segment_tree ( typename Traits::size_type const, T, Alloc )
        -> segment_tree< T, PB, Alloc >;


template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_swap_out_buffer ( split_buffer< value_type, allocator_type & > & _buffer_ ) noexcept
{
        _annotate_delete();

        std::swap( this->begin_    , _buffer_.begin_     );
        std::swap( this->end_      , _buffer_.end_       );
        std::swap( this->_end_cap(), _buffer_._end_cap() );

        _buffer_.first_ = _buffer_.begin_;
        _annotate_new( real_size() );
        _invalidate_all_iterators();
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_swap_out_circular_buffer ( split_buffer< value_type, allocator_type & > & _buffer_ )
{
        _annotate_delete();

        mem::_construct_backward_with_exception_guarantees( this->_alloc(), this->begin_, this->end_, _buffer_.begin_ );

        std::swap( this->begin_    , _buffer_.begin_     );
        std::swap( this->end_      , _buffer_.end_       );
        std::swap( this->_end_cap(), _buffer_._end_cap() );

        _buffer_.first_ = _buffer_.begin_;
        _annotate_new( real_size() );
        _invalidate_all_iterators();
}

template< typename T, auto PB, typename Allocator >
typename segment_tree< T, PB, Allocator >::pointer
segment_tree< T, PB, Allocator >::_swap_out_circular_buffer ( split_buffer< value_type, allocator_type & > & _buffer_, pointer _ptr_ )
{
        _annotate_delete();

        pointer ret = _buffer_.begin_;

        mem::_construct_backward_with_exception_guarantees( this->_alloc(), this->begin_,      _ptr_, _buffer_.begin_ );
        mem::_construct_forward_with_exception_guarantees ( this->_alloc(),        _ptr_, this->end_, _buffer_.end_   );

        std::swap( this->begin_    , _buffer_.begin_     );
        std::swap( this->end_      , _buffer_.end_       );
        std::swap( this->_end_cap(), _buffer_._end_cap() );

        _buffer_.first_ = _buffer_.begin_;
        _annotate_new( real_size() );
        _invalidate_all_iterators();

        return ret;
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_vallocate ( size_type const _count_ )
{
        NPL_ASSERT( _count_ <= max_size(), "segment_tree::_vallocate: size > max_size" );

        this->begin_ = this->end_ = _alloc_traits::allocate( this->_alloc(), _count_ );
        this->end_cap_ = this->begin_ + _count_;

        _annotate_new( 0 );
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_vdeallocate () noexcept
{
        if( this->begin_ != nullptr )
        {
                clear();
                _alloc_traits::deallocate( this->_alloc(), this->begin_, capacity() );
                this->begin_ = this->end_ = this->end_cap_ = nullptr;
        }
}

template< typename T, auto PB, typename Allocator >
typename segment_tree< T, PB, Allocator >::size_type
segment_tree< T, PB, Allocator >::max_size () const noexcept
{
        return std::min< size_type >( _alloc_traits::max_size( this->_alloc() ), std::numeric_limits< difference_type >::max() );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::size_type
segment_tree< T, PB, Allocator >::_msb ( size_type _size_ ) const noexcept
{
        _size_ |= ( _size_ >>  1 );
        _size_ |= ( _size_ >>  2 );
        _size_ |= ( _size_ >>  4 );
        _size_ |= ( _size_ >>  8 );
        _size_ |= ( _size_ >> 16 );

        if constexpr( sizeof( size_type ) == 8 )
        {
                _size_ |= ( _size_ >> 32 );
        }

        return ( _size_ & ~( _size_ >> 1 ) );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::size_type
segment_tree< T, PB, Allocator >::_round_to_pow2 ( size_type const _size_ ) const noexcept
{
        auto msb = _msb( _size_ );

        return  _size_ == msb ?
                _size_ :
                ( msb << 1 );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::size_type
segment_tree< T, PB, Allocator >::_recommend ( size_type const _new_size_ ) const noexcept
{
        size_type const ms = max_size();

        NPL_ASSERT( _new_size_ < ms, "segment_tree::_recommend: new size > max size" );

        size_type const cap = capacity();

        if( cap >= ms / 2 )
        {
                return ms;
        }

        return std::max< size_type >( 2 * cap, 2 * ( _round_to_pow2( _new_size_ ) ) );
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_rebuild_tree () noexcept
{
        size_type elems = distance( begin(), end() );

        for( auto i = size() - 1; i > 0; --i )
        {
                if( i + 1 > elems && i > elems )
                {
                        this->begin_[ i ] = value_type{};
                }
                else if( i + 1 > elems )
                {
                        this->begin_[ i ] = this->begin_[ 2 * i ];
                }
                else
                {
                        this->begin_[ i ] = parent_builder_( this->begin_[ 2 * i ], this->begin_[ 2 * i + 1 ] );
                }
        }
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_update ( size_type _position_, const_reference _val_ )
{
        _position_ += size();

        this->begin_[ _position_ ] = _val_;

        for( _position_ /= 2; _position_ >= 1; _position_ /= 2 )
        {
                this->begin_[ _position_ ] = parent_builder_( this->begin_[ 2 * _position_ ], this->begin_[ 2 * _position_ + 1 ] );
        }
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_update ( iterator _position_, const_reference _val_ )
{
        size_type index = distance( begin() + size(), _position_ );

        _update( index, _val_ );
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_update ( size_type _position_, value_type && _val_ ) noexcept
{
        _position_ += size();

        this->begin_[ _position_ ] = NPL_MOVE( _val_ );

        for( _position_ /= 2; _position_ >= 1; _position_ /= 2 )
        {
                this->begin_[ _position_ ] = parent_builder_( this->begin_[ 2 * _position_ ], this->begin_[ 2 * _position_ + 1 ] );
        }
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_update ( iterator _position_, value_type && _val_ ) noexcept
{
        size_type index = distance( begin() + size(), _position_ );

        _update( index, NPL_MOVE( _val_ ) );
}

template< typename T, auto PB, typename Allocator >
template< typename... Args >
void
segment_tree< T, PB, Allocator >::_update ( size_type _position_, Args... _args_ )
{
        _position_ += size();

        this->begin_[ _position_ ] = NPL_MOVE( T( _args_... ) );

        for( _position_ /= 2; _position_ >= 1; _position_ /= 2 )
        {
                this->begin_[ _position_ ] = parent_builder_( this->begin_[ 2 * _position_ ], this->begin_[ 2 * _position_ + 1 ] );
        }
}

template< typename T, auto PB, typename Allocator >
template< typename... Args >
void
segment_tree< T, PB, Allocator >::_update ( iterator _position_, Args... _args_ )
{
        size_type index = distance( begin() + size(), _position_ );

        _update( index, NPL_FWD( _args_ )... );
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_trim_tree ( size_type const _new_size_ ) noexcept
{
        size_type new_cap = 2 * _new_size_;

        auto end_iter = begin();
        end_iter += _new_size_;

        allocator_type & alloc = this->_alloc();

        split_buffer< value_type, allocator_type & > buffer( new_cap, 0, alloc );

        buffer._construct_at_end( _new_size_ );
        buffer._construct_at_end( begin(), end_iter );

        _swap_out_buffer( buffer );
        _rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_expand_tree ( size_type const _new_size_ )
{
        size_type current_size = size();
        size_type current_cap  = capacity();
        size_type new_cap      = 2 * _new_size_;

        allocator_type & alloc = this->_alloc();

        split_buffer< value_type, allocator_type & > buffer( new_cap, current_cap, alloc );
        buffer._construct_at_end( new_cap - current_cap );
        _swap_out_circular_buffer( buffer );

        for( size_type i = 0; i < current_size; ++i )
        {
                this->begin_[ new_cap / 2 + i ] = NPL_MOVE( this->begin_[ current_cap / 2 + i ] );
        }

        _rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_construct_at_end ( size_type const _count_ )
{
        _construct_transaction tx( *this, _count_ );

        const_pointer new_end = tx.new_end_;

        for( pointer pos = tx.position_; pos != new_end; ++pos, tx.position_ = pos )
        {
                _alloc_traits::construct( this->_alloc(), mem::to_address( pos ) );
        }
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_construct_at_end ( size_type const _count_, const_reference _val_ )
{
        _construct_transaction tx( *this, _count_ );

        const_pointer new_end = tx.new_end_;

        for( pointer pos = tx.position_; pos != new_end; ++pos, tx.position_ = pos )
        {
                _alloc_traits::construct( this->_alloc(), mem::to_address( pos ), _val_ );
        }
}

template< typename T, auto PB, typename Allocator >
template< typename SegtreeIterator >
enable_if_t
<
        is_segment_tree_iterator_v< SegtreeIterator >,
        void
>
segment_tree< T, PB, Allocator >::_construct_at_end ( SegtreeIterator _first_, SegtreeIterator _last_, size_type const _count_ )
{
        _construct_transaction tx( *this, _count_ );

        mem::_construct_range_forward( this->_alloc(), _first_, _last_, tx.position_ );
}

template< typename T, auto PB, typename Allocator >
template< typename InputIterator >
enable_if_t
<
         is_at_least_input_iterator_v  < InputIterator > &&
        !is_at_least_forward_iterator_v< InputIterator > &&
        !is_segment_tree_iterator_v < InputIterator >,
        void
>
segment_tree< T, PB, Allocator >::_construct_at_end ( InputIterator _first_, InputIterator _last_, size_type const _count_ )  //  TODO: temp impl
{
        _construct_transaction tx( *this, _count_ );
        const_pointer new_end = tx.new_end_;

        for( pointer pos = tx.position_; pos != new_end && _first_ != _last_; ++pos, tx.position_ = pos )
        {
                _alloc_traits::construct( this->_alloc(), mem::to_address( pos ), *_first_++ );
        }
}

template< typename T, auto PB, typename Allocator >
template< typename ForwardIterator >
enable_if_t
<
         is_at_least_forward_iterator_v< ForwardIterator > &&
        !is_segment_tree_iterator_v < ForwardIterator >,
        void
>
segment_tree< T, PB, Allocator >::_construct_at_end ( ForwardIterator _first_, ForwardIterator _last_, size_type const _count_ )  //  TODO: temp impl
{
        _construct_transaction tx( *this, _count_ );
        const_pointer new_end = tx.new_end_;

        for( pointer pos = tx.position_; pos != new_end && _first_ != _last_; ++pos, tx.position_ = pos )
        {
                _alloc_traits::construct( this->_alloc(), mem::to_address( pos ), *_first_++ );
        }
}

template< typename T, auto PB, typename Allocator >
segment_tree< T, PB, Allocator >::segment_tree ( size_type const _count_ )
{
        if( _count_ > 0 )
        {
                auto new_size = _round_to_pow2( _count_ );
                auto new_cap  = 2 * new_size;

                _vallocate( new_cap );
                _construct_at_end( _count_ );
        }
}

template< typename T, auto PB, typename Allocator >
segment_tree< T, PB, Allocator >::segment_tree ( size_type const _count_, allocator_type const & _alloc_ )
        : _base( _alloc_ )
{
        if( _count_ > 0 )
        {
                auto new_size = _round_to_pow2( _count_ );
                auto new_cap  = 2 * new_size;

                _vallocate( new_cap );
                _construct_at_end( _count_ );
        }
}

template< typename T, auto PB, typename Allocator >
segment_tree< T, PB, Allocator >::segment_tree ( size_type const _count_, value_type const & _val_ )
{
        if( _count_ > 0 )
        {
                auto new_size = _round_to_pow2( _count_ );
                auto new_cap  = 2 * new_size;

                _vallocate( new_cap );
                _construct_at_end( new_size );
                _construct_at_end( _count_, _val_ );
                _rebuild_tree();
        }
}

template< typename T, auto PB, typename Allocator >
segment_tree< T, PB, Allocator >::segment_tree ( size_type const _count_, value_type const & _val_, allocator_type const & _alloc_ )
        : _base( _alloc_ )
{
        if( _count_ > 0 )
        {
                auto new_size = _round_to_pow2( _count_ );
                auto new_cap  = 2 * new_size;

                _vallocate( new_cap );
                _construct_at_end( new_size );
                _construct_at_end( _count_, _val_ );
                _rebuild_tree();
        }
}

template< typename T, auto PB, typename Allocator >
template< typename SegtreeIterator >
segment_tree< T, PB, Allocator >::segment_tree ( SegtreeIterator _first_,
                enable_if_t
                <
                        is_segment_tree_iterator_v< SegtreeIterator > &&
                        is_constructible_v
                        <
                                value_type,
                                typename iterator_traits< SegtreeIterator >::reference
                        >,
                        SegtreeIterator
                > _last_ )
{
        size_type count    = distance( _first_, _last_ );
        size_type new_size = _round_to_pow2( count );
        size_type new_cap  = 2 * new_size;

        _vallocate( new_cap );
        _construct_at_end( new_size );
        _construct_at_end( _first_, _last_, count );
        _rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
template< typename SegtreeIterator >
segment_tree< T, PB, Allocator >::segment_tree ( SegtreeIterator _first_, SegtreeIterator _last_, allocator_type const & _alloc_,
                enable_if_t
                <
                        is_segment_tree_iterator_v< SegtreeIterator > &&
                        is_constructible_v
                        <
                                value_type,
                                typename iterator_traits< SegtreeIterator >::reference
                        >
                > * )
        : _base( _alloc_ )
{
        size_type count    = distance( _first_, _last_ );
        size_type new_size = _round_to_pow2( count );
        size_type new_cap  = 2 * new_size;

        _vallocate( new_cap );
        _construct_at_end( new_size );
        _construct_at_end( _first_, _last_, count );
        _rebuild_tree();
}

#if 0
template< typename T, auto PB, typename Allocator >
template< typename InputIterator >
segment_tree< T, PB, Allocator >::segment_tree ( InputIterator _first_,
                enable_if_t
                <
                         is_input_iterator_v  < InputIterator > &&
                        !is_at_least_forward_iterator_v< InputIterator > &&
                        !is_segment_tree_iterator_v < InputIterator > &&
                        is_constructible_v
                        <
                                value_type,
                                typename iterator_traits< InputIterator >::reference
                        >,
                        InputIterator
                > _last_ )
{
        for( ; _first_ != _last_; ++_first_ )
        {
                _emplace_back( *_first_ );
        }
}

template< typename T, auto PB, typename Allocator >
template< typename InputIterator >
segment_tree< T, PB, Allocator >::segment_tree ( InputIterator _first_, InputIterator _last_, allocator_type const & _alloc_,
                enable_if_t
                <
                         is_input_iterator_v  < InputIterator > &&
                        !is_at_least_forward_iterator_v< InputIterator > &&
                        !is_segment_tree_iterator_v < InputIterator > &&
                        is_constructible_v
                        <
                                value_type,
                                typename iterator_traits< InputIterator >::reference
                        >
                > * )
        : _base( _alloc_ )
{
        for( ; _first_ != _last_; ++_first_ )
        {
                _emplace_back( *_first_ );
        }
}
#endif

template< typename T, auto PB, typename Allocator >
template< typename ForwardIterator >
segment_tree< T, PB, Allocator >::segment_tree ( ForwardIterator _first_,
                enable_if_t
                <
                         is_at_least_forward_iterator_v< ForwardIterator > &&
                        !is_segment_tree_iterator_v < ForwardIterator > &&
                        is_constructible_v
                        <
                                value_type,
                                typename iterator_traits< ForwardIterator >::reference
                        >,
                        ForwardIterator
                > _last_ )
{
        size_type count    = distance( _first_, _last_ );
        size_type new_size = _round_to_pow2( count );
        size_type new_cap  = 2 * new_size;

        _vallocate( new_cap );
        _construct_at_end( new_size );
        _construct_at_end( _first_, _last_, count );
        _rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
template< typename ForwardIterator >
segment_tree< T, PB, Allocator >::segment_tree ( ForwardIterator _first_, ForwardIterator _last_, allocator_type const & _alloc_,
                enable_if_t
                <
                         is_at_least_forward_iterator_v< ForwardIterator > &&
                        !is_segment_tree_iterator_v < ForwardIterator > &&
                        is_constructible_v
                        <
                                value_type,
                                typename iterator_traits< ForwardIterator >::reference
                        >
                > * )
        : _base( _alloc_ )
{
        size_type count    = distance( _first_, _last_ );
        size_type new_size = _round_to_pow2( count );
        size_type new_cap  = 2 * new_size;

        _vallocate( new_cap );
        _construct_at_end( new_size );
        _construct_at_end( _first_, _last_, count );
        _rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
segment_tree< T, PB, Allocator >::segment_tree ( segment_tree const & _other_ )
        : _base( _alloc_traits::select_on_container_copy_construction( _other_._alloc() ) )
{
        size_type new_cap  = _other_.capacity();

        if( new_cap > 0 )
        {
                _vallocate( new_cap );

                for( size_type i = 0; i < new_cap; ++i )
                {
                        _construct_one_at_end( _other_.begin_[ i ] );
                }
        }
}

template< typename T, auto PB, typename Allocator >
segment_tree< T, PB, Allocator >::segment_tree ( segment_tree const & _other_, type_identity< allocator_type > const & _alloc_ )
        : _base( _alloc_ )
{
        size_type new_cap  = _other_.capacity();

        if( new_cap > 0 )
        {
                _vallocate( new_cap );

                for( size_type i = 0; i < new_cap; ++i )
                {
                        _construct_one_at_end( _other_.begin_[ i ] );
                }
        }
}

template< typename T, auto PB, typename Allocator >
inline
segment_tree< T, PB, Allocator >::segment_tree ( segment_tree && _other_ ) noexcept
        : _base( NPL_MOVE( _other_._alloc() ) )
{
        this->begin_   = _other_.begin_  ;
        this->end_     = _other_.end_    ;
        this->end_cap_ = _other_.end_cap_;

        _other_.begin_ = _other_.end_ = _other_.end_cap_ = nullptr;
}

template< typename T, auto PB, typename Allocator >
inline
segment_tree< T, PB, Allocator >::segment_tree ( segment_tree && _other_, type_identity< allocator_type > const & _alloc_ )
        : _base( _alloc_ )
{
        if( _alloc_ == _other_._alloc() )
        {
                this->begin_   = _other_.begin_  ;
                this->end_     = _other_.end_    ;
                this->end_cap_ = _other_.end_cap_;

                _other_.begin_ = _other_.end_ = _other_.end_cap_ = nullptr;
        }
        else
        {
                using mit = move_iterator< iterator >;
                assign( mit( _other_.begin() ), mit( _other_.end() ) );
        }
}

template< typename T, auto PB, typename Allocator >
inline
segment_tree< T, PB, Allocator >::segment_tree ( std::initializer_list< value_type > _list_ )
{
        if( _list_.size() > 0 )
        {
                auto new_size = _round_to_pow2( _list_.size() );
                auto new_cap  = 2 * new_size;

                _vallocate( new_cap );
                _construct_at_end( new_size );
                _construct_at_end( _list_.begin(), _list_.end(), _list_.size() );
                _rebuild_tree();
        }
}

template< typename T, auto PB, typename Allocator >
inline
segment_tree< T, PB, Allocator >::segment_tree ( std::initializer_list< value_type > _list_, allocator_type const & _alloc_ )
        : _base( _alloc_ )
{
        if( _list_.size() > 0 )
        {
                auto new_size = _round_to_pow2( _list_.size() );
                auto new_cap  = 2 * new_size;

                _vallocate( new_cap );
                _construct_at_end( _list_.begin(), _list_.end(), _list_.size() );
                _rebuild_tree();
        }
}

template< typename T, auto PB, typename Allocator >
inline
segment_tree< T, PB, Allocator > &
segment_tree< T, PB, Allocator >::operator= ( segment_tree && _other_ )
        noexcept( ( noexcept_move_assign_container_v< Allocator, _alloc_traits > ) )
{
        _move_assign( _other_, bool_constant<
                        _alloc_traits::propagate_on_container_move_assignment::value >() );

        return *this;
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_move_assign ( segment_tree & _other_, false_type )
        noexcept( _alloc_traits::is_always_equal::value )
{

        if( _base::_alloc() != _other_._alloc() )
        {
                using mit = move_iterator< iterator >;
                assign( mit( _other_.begin() ), mit( _other_.end() ) );
        }
        else
        {
                _move_assign( _other_, true_type() );
        }
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::_move_assign ( segment_tree & _other_, true_type )
        noexcept( is_nothrow_move_assignable_v< allocator_type > )
{
        _vdeallocate();
        _base::_move_assign_alloc( _other_ );

        this->begin_   = _other_.begin_  ;
        this->end_     = _other_.end_    ;
        this->end_cap_ = _other_.end_cap_;

        _other_.begin_ = _other_.end_ = _other_.end_cap_ = nullptr;
}

template< typename T, auto PB, typename Allocator >
inline
segment_tree< T, PB, Allocator > &
segment_tree< T, PB, Allocator >::operator= ( segment_tree const & _other_ )
{
        if( this != &_other_ )
        {
                _base::_copy_assign_alloc( _other_ );
                assign( _other_.begin(), _other_.end() );
        }
        return *this;
}

template< typename T, auto PB, typename Allocator >
template< typename SegtreeIterator >
enable_if_t
<
        is_segment_tree_iterator_v< SegtreeIterator > &&
        is_constructible_v
        <
                T,
                typename iterator_traits< SegtreeIterator >::reference
        >,
        void
>
segment_tree< T, PB, Allocator >::assign ( SegtreeIterator _first_, SegtreeIterator _last_ )
{
        size_type count    = static_cast< size_type >( distance( _first_, _last_ ) );
        size_type new_size = _round_to_pow2( count );
        size_type new_cap  = 2 * new_size;

        if( false /* new_cap < capacity() */ )
        {
                SegtreeIterator mid = _last_;
                bool growing = false;

                if( new_size > real_size() )
                {
                        growing = true;
                        mid = _first_;
                        advance( mid, real_size() );
                }

                pointer mid_ptr = std::copy( _first_, mid, this->begin_ );

                if( growing )
                {
                        _construct_at_end( mid, _last_, new_size - real_size() );
                }
                else
                {
                        this->_destruct_at_end( mid_ptr );
                }
        }
        else
        {
                _vdeallocate();
                _vallocate( new_cap );
                _construct_at_end( new_size );
                _construct_at_end( _first_, _last_, count );
        }
        _rebuild_tree();
        _invalidate_all_iterators();
}

#if 0
template< typename T, auto PB, typename Allocator >
template< typename InputIterator >
enable_if_t
<
         is_input_iterator_v  < InputIterator > &&
        !is_at_least_forward_iterator_v< InputIterator > &&
        !is_segment_tree_iterator_v < InputIterator > &&
        is_constructible_v
        <
                T,
                typename iterator_traits< InputIterator >::reference
        >,
        void
>
segment_tree< T, PB, Allocator >::assign ( InputIterator _first_, InputIterator _last_ )
{
        this->_destruct_at_end( this->begin_ + size() );

        for( ; _first_ != _last_; ++_first_ )
        {
                _emplace_back( *_first_ );
        }
        _rebuild_tree();
}
#endif

template< typename T, auto PB, typename Allocator >
template< typename ForwardIterator >
enable_if_t
<
         is_at_least_forward_iterator_v< ForwardIterator > &&
        !is_segment_tree_iterator_v < ForwardIterator > &&
        is_constructible_v
        <
                T,
                typename iterator_traits< ForwardIterator >::reference
        >,
        void
>
segment_tree< T, PB, Allocator >::assign ( ForwardIterator _first_, ForwardIterator _last_ )
{
        size_type count    = distance( _first_, _last_ );
        size_type new_size = _round_to_pow2( count );
        size_type new_cap  = 2 * new_size;

        if( new_cap > capacity() )
        {
                clear();
                _vdeallocate();
                _vallocate( new_cap );
                _construct_at_end( new_size );
                _construct_at_end( _first_, _last_, count );
                _rebuild_tree();
        }
        else
        {
                this->_destruct_at_end( this->begin_ + size() );

                _construct_at_end( _first_, _last_, count );
                _rebuild_tree();
        }
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::iterator
segment_tree< T, PB, Allocator >::_make_iter ( pointer _ptr_ ) noexcept
{
        return iterator( _ptr_ );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::const_iterator
segment_tree< T, PB, Allocator >::_make_iter ( const_pointer _ptr_ ) const noexcept
{
        return const_iterator( _ptr_ );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::iterator
segment_tree< T, PB, Allocator >::real_begin () noexcept
{
        return _make_iter( this->begin_ );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::const_iterator
segment_tree< T, PB, Allocator >::real_begin () const noexcept
{
        return _make_iter( this->begin_ );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::iterator
segment_tree< T, PB, Allocator >::begin () noexcept
{
        return _make_iter( this->begin_ + size() );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::const_iterator
segment_tree< T, PB, Allocator >::begin () const noexcept
{
        return _make_iter( this->begin_ + size() );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::iterator
segment_tree< T, PB, Allocator >::end () noexcept
{
        return _make_iter( this->end_ );
}

template< typename T, auto PB, typename Allocator >
inline
typename segment_tree< T, PB, Allocator >::const_iterator
segment_tree< T, PB, Allocator >::end () const noexcept
{
        return _make_iter( this->end_ );
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE
typename segment_tree< T, PB, Allocator >::reference
segment_tree< T, PB, Allocator >::operator[] ( size_type const _index_ ) noexcept
{
        NPL_ASSERT( !empty() && _index_ < size(), "segment_tree::operator[]: index out of bounds" );

        return this->begin_[ size() + _index_ ];
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE
typename segment_tree< T, PB, Allocator >::const_reference
segment_tree< T, PB, Allocator >::operator[] ( size_type const _index_ ) const noexcept
{
        NPL_ASSERT( !empty() && _index_ < size(), "segment_tree::operator[]: index out of bounds" );

        return this->begin_[ size() + _index_ ];
}

template< typename T, auto PB, typename Allocator >
inline
bool
segment_tree< T, PB, Allocator >::operator== ( segment_tree const & _other_ ) const noexcept
{
        if( empty() && _other_.empty() )
        {
                return true;
        }

        if( size() != _other_.size() )
        {
                return false;
        }

        for( size_type i = 0; i < size(); ++i )
        {
                if( at( i ) != _other_.at( i ) )
                {
                        return false;
                }
        }

        return true;
}

template< typename T, auto PB, typename Allocator >
inline
bool
segment_tree< T, PB, Allocator >::operator!= ( segment_tree const & _other_ ) const noexcept
{
        return !operator==( _other_ );
}

template< typename T, auto PB, typename Allocator >
inline
auto &
segment_tree< T, PB, Allocator >::operator+= ( segment_tree const & _other_ ) noexcept
{
        NPL_ASSERT( size() == _other_.size(), "segment_tree::operator+=: container size mismatch" );

        for( size_type i = 0; i < size(); ++i )
        {
                at( i ) += _other_.at( i );
        }

        return *this;
}

template< typename T, auto PB, typename Allocator >
inline
auto
segment_tree< T, PB, Allocator >::operator+ ( segment_tree const & _other_ ) const
{
        NPL_ASSERT( size() == _other_.size(), "segment_tree::operator+: container size mismatch" );

        _self res( *this );

        res += _other_;

        return res;
}

template< typename T, auto PB, typename Allocator >
inline
auto &
segment_tree< T, PB, Allocator >::operator-= ( segment_tree const & _other_ ) noexcept
{
        NPL_ASSERT( size() == _other_.size(), "segment_tree::operator-=: container size mismatch" );

        for( size_type i = 0; i < size(); ++i )
        {
                at( i ) -= _other_.at( i );
        }

        return *this;
}

template< typename T, auto PB, typename Allocator >
inline
auto
segment_tree< T, PB, Allocator >::operator- ( segment_tree const & _other_ ) const
{
        NPL_ASSERT( size() == _other_.size(), "segment_tree::operator-: container size mismatch" );

        _self res( *this );

        res -= _other_;

        return res;
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE
typename segment_tree< T, PB, Allocator >::reference
segment_tree< T, PB, Allocator >::at ( size_type const _index_ ) noexcept
{
        NPL_ASSERT( !empty() && _index_ < size(), "segment_tree::at: index out of bounds" );

        return this->begin_[ size() + _index_ ];
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE
typename segment_tree< T, PB, Allocator >::const_reference
segment_tree< T, PB, Allocator >::at ( size_type const _index_ ) const noexcept
{
        NPL_ASSERT( !empty() && _index_ < size(), "segment_tree::at: index out of bounds" );

        return this->begin_[ size() + _index_ ];
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE
typename segment_tree< T, PB, Allocator >::value_type
segment_tree< T, PB, Allocator >::element_at ( size_type const _index_ ) const noexcept
{
        NPL_ASSERT( !empty() && _index_ < capacity(), "segment_tree::element_at: index out of bounds" );

        return this->begin_[ _index_ ];
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE NPL_FLATTEN
typename segment_tree< T, PB, Allocator >::value_type
segment_tree< T, PB, Allocator >::range () const noexcept
{
        NPL_ASSERT( !empty(), "segment_tree::range: called on empty segment tree" );

        return range( 0, size() - 1 );
}

template< typename T, auto PB, typename Allocator >
NPL_ALWAYS_INLINE
typename segment_tree< T, PB, Allocator >::value_type
segment_tree< T, PB, Allocator >::range ( size_type _x_, size_type _y_ ) const noexcept
{
        NPL_ASSERT( !empty() && _x_ <= _y_ && _y_ < size(), "segment_tree::range: index out of bounds" );

        _x_ += size();
        _y_ += size();

        T res = T();

        while( _x_ <= _y_ )
        {
                if( _x_ % 2 == 1 )
                {
                        res = parent_builder_( res, this->begin_[ _x_++ ] );
                }
                if( _y_ % 2 == 0 )
                {
                        res = parent_builder_( res, this->begin_[ _y_-- ] );
                }
                _x_ /= 2;
                _y_ /= 2;
        }

        return res;
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::reserve ( size_type const _size_ )
{
        resize( _size_ );
}

#if 0
template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::shrink_to_fit () noexcept
{

}
#endif

template< typename T, auto PB, typename Allocator >
template< typename U >
void
segment_tree< T, PB, Allocator >::_push_back_slow_path ( [[ maybe_unused ]] U && _val_ )
{

}

template< typename T, auto PB, typename Allocator >
inline
void
segment_tree< T, PB, Allocator >::push_back ( const_reference _val_ )
{
        if( real_size() < capacity() )
        {
                _construct_one_at_end( _val_ );
                _update( real_size() - size() - 1, _val_ );
        }
}

template< typename T, auto PB, typename Allocator >
inline
void
segment_tree< T, PB, Allocator >::push_back ( value_type && _val_ )
{
        if( real_size() < capacity() )
        {
                _construct_one_at_end( NPL_MOVE( _val_ ) );
                _update( real_size() - size() - 1, back() );
        }
}

template< typename T, auto PB, typename Allocator >
template< typename... Args >
void
segment_tree< T, PB, Allocator >::_emplace_back_slow_path ( [[ maybe_unused ]] Args&&... _args_ )
{

}

template< typename T, auto PB, typename Allocator >
template< typename... Args >
inline
typename segment_tree< T, PB, Allocator >::reference
segment_tree< T, PB, Allocator >::emplace_back ( Args&&... _args_ )
{
        if( real_size() < capacity() )
        {
                _construct_one_at_end( NPL_FWD( _args_ )... );
                _update( real_size() - size() - 1, back() );
        }

        return back();
}

#if 0
template< typename T, auto PB, typename Allocator >
inline
void
segment_tree< T, PB, Allocator >::pop_back ()
{

}
#endif

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::resize ( size_type const _size_ )
{
        size_type new_size = _round_to_pow2( _size_ );
        size_type new_cap  = 2 * new_size;

        if( new_cap < capacity() )
        {
                _trim_tree( new_size );
        }
        else if( new_cap > capacity() )
        {
                _expand_tree( new_size );
        }
        else
        {
                return;
        }
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::resize ( size_type const _size_, const_reference _val_ )  //  TODO: expand and fill, dont replace current values idiot
{
        size_type new_size = _round_to_pow2( _size_ );
        size_type new_cap  = 2 * new_size;

        clear();
        _vdeallocate();
        _vallocate( new_cap );
        _construct_at_end( new_size );
        _construct_at_end( new_size, _val_ );
        _rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
void
segment_tree< T, PB, Allocator >::swap ( segment_tree & _other_ ) noexcept
{
        NPL_ASSERT( _alloc_traits::propagate_on_container_swap::value || this->_alloc() == _other_._alloc(),
                        "segment_tree::swap: if lhs.alloc != rhs.alloc, alloc_type needs to propagate on swap" );

        std::swap( this->begin_  , _other_.begin_   );
        std::swap( this->end_    , _other_.end_     );
        std::swap( this->end_cap_, _other_.end_cap_ );

        mem::_swap_allocator( this->_alloc(), _other_._alloc(),
                        bool_constant< _alloc_traits::propagate_on_container_swap::value >() );

        _rebuild_tree();
        _other_._rebuild_tree();
}

template< typename T, auto PB, typename Allocator >
inline
void
segment_tree< T, PB, Allocator >::_invalidate_all_iterators ()
{}

template< typename T, auto PB, typename Allocator >
inline
void
segment_tree< T, PB, Allocator >::_invalidate_iterators_past ( [[ maybe_unused ]] pointer _new_last_ )
{}

template< typename T, auto PB, typename Allocator >
bool
segment_tree< T, PB, Allocator >::_invariants () const noexcept
{
        if( this->begin_ == nullptr )
        {
                if( this->end_ != nullptr || this->end_cap_ != nullptr )
                {
                        return false;
                }
        }
        else
        {
                if( this->begin_ > this->end_ )
                {
                        return false;
                }
                if( this->begin_ == this->end_cap_ )
                {
                        return false;
                }
                if( this->end_ > this->end_cap_ )
                {
                        return false;
                }
        }
        return true;
}

template< typename T, auto PB, typename Allocator >
bool
segment_tree< T, PB, Allocator >::_dereferenceable ( const_iterator const * _i_ ) const noexcept
{
        return this->begin_ <= _i_->base() && _i_->base() < this->end_;
}

template< typename T, auto PB, typename Allocator >
bool
segment_tree< T, PB, Allocator >::_decrementable ( const_iterator const * _i_ ) const noexcept
{
        return this->begin_ < _i_->base() && _i_->base() <= this->end_;
}

template< typename T, auto PB, typename Allocator >
bool
segment_tree< T, PB, Allocator >::_addable ( const_iterator const * _i_, ptrdiff_t _n_ ) const noexcept
{
        const_pointer p = _i_->base() + _n_;
        return this->begin_ <= p && p <= this->end_;
}

template< typename T, auto PB, typename Allocator >
bool
segment_tree< T, PB, Allocator >::_subscriptable ( const_iterator const * _i_, ptrdiff_t _n_ ) const noexcept
{
        const_pointer p = _i_->base() + _n_;
        return this->begin_ <= p && p < this->end_;
}


} // namespace npl
