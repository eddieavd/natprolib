// vim: set ft=cpp:
//
//
//      natprolib
//      prefix_array
//

#pragma once

#include <memory>

#include <util/util.hpp>
#include <container/static_vector>

#pragma GCC diagnostic error "-Wdeprecated-declarations"


namespace npl
{


template< typename T, size_t N >
class prefix_array;


struct prefix_array_iterator_tag : public random_access_iterator_tag {};

template< typename T >
struct is_prefix_array_iterator : public has_same_npl_iterator_category< iterator_traits< T >, prefix_array_iterator_tag > {};

template< typename T >
inline constexpr bool is_prefix_array_iterator_v = is_prefix_array_iterator< T >::value;


template< typename T, size_t N >
class prefix_array
        : public static_vector< T, N >
{
        template< bool C, typename T_ = T >
        class _prefix_array_iterator
                : public static_vector< T, N >::template _static_vector_iterator< C, T_ >
        {
                friend class _prefix_array_iterator< !C, T_ >;
        public:
                using                 _base = typename static_vector< T, N >::template _static_vector_iterator< C, T_ >;
                using npl_iterator_category = prefix_array_iterator_tag;
        private:
                explicit constexpr _prefix_array_iterator ( typename _base::pointer _ptr_ ) : _base( _ptr_ ) {}
        };

        constexpr void _update_back () noexcept;
public:
        using           _base = static_vector< T, N >           ;
        using           _self = prefix_array                    ;
        using      value_type = typename _base::     value_type ;
        using         pointer = typename _base::        pointer ;
        using   const_pointer = typename _base::  const_pointer ;
        using       reference = typename _base::      reference ;
        using const_reference = typename _base::const_reference ;
        using       size_type = typename _base::      size_type ;
        using difference_type = typename _base::difference_type ;

        using               iterator = _prefix_array_iterator< false >;
        using         const_iterator = _prefix_array_iterator<  true >;
        using       reverse_iterator = reverse_iter<       iterator >;
        using const_reverse_iterator = reverse_iter< const_iterator >;

        constexpr static auto static_capacity{ N };

        constexpr prefix_array () noexcept = default;

        constexpr prefix_array ( size_type const _count_                        ) noexcept( noexcept( value_type{       } ) );
        constexpr prefix_array ( size_type const _count_, const_reference _val_ ) noexcept( noexcept( value_type( _val_ ) ) );

        constexpr prefix_array ( prefix_array const &  _other_ ) noexcept( std::is_nothrow_copy_constructible_v< value_type > );
        constexpr prefix_array ( prefix_array       && _other_ ) noexcept( std::is_nothrow_move_constructible_v< value_type > );

        constexpr prefix_array ( std::initializer_list< value_type > _list_ ) noexcept( std::is_nothrow_copy_assignable_v< value_type > );

        constexpr ~prefix_array () noexcept requires( std::is_trivially_destructible_v< value_type > ) = default;

        constexpr ~prefix_array () noexcept( std::is_nothrow_destructible_v< value_type > ) requires( !std::is_trivially_destructible_v< value_type > )
        {
                this->clear();
        }

        constexpr prefix_array & operator= ( prefix_array const &  _other_ ) noexcept( std::is_nothrow_copy_assignable_v   < value_type > &&
                                                                                                     std::is_nothrow_copy_constructible_v< value_type > );
        constexpr prefix_array & operator= ( prefix_array       && _other_ ) noexcept( std::is_nothrow_move_assignable_v   < value_type > &&
                                                                                                     std::is_nothrow_move_constructible_v< value_type > );

        constexpr auto & operator+= ( prefix_array const & _other_ )        noexcept ;
        constexpr auto   operator+  ( prefix_array const & _other_ ) const           ;
        constexpr auto & operator-= ( prefix_array const & _other_ )        noexcept ;
        constexpr auto   operator-  ( prefix_array const & _other_ ) const           ;

        NPL_DEPRECATED constexpr iterator insert ( const_iterator _position_, value_type const &  _val_ );
        NPL_DEPRECATED constexpr iterator insert ( const_iterator _position_, value_type       && _val_ );

        NPL_DEPRECATED constexpr void assign ( size_type const _count_, value_type const & _val_ );
        NPL_DEPRECATED constexpr void resize ( size_type const _count_                           );
        NPL_DEPRECATED constexpr void assign ( std::initializer_list< value_type >        _list_ );

        NPL_NODISCARD NPL_ALWAYS_INLINE NPL_FLATTEN constexpr value_type element_at ( size_type const _index_ ) const noexcept;

        NPL_NODISCARD NPL_ALWAYS_INLINE constexpr value_type range ( size_type const _x_, size_type const _y_ ) const noexcept;

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        constexpr
        enable_2d_range_container_base_t< U >
        element_at ( size_type const _x_, size_type const _y_ ) const noexcept
        { return range( _x_, _y_, _x_, _y_ ); }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        constexpr
        enable_2d_range_container_base_t< U >
        range ( size_type const _x1_, size_type const _y1_, size_type const _x2_, size_type const _y2_ ) const noexcept
        {
                return  _x1_ == 0 ?
                        this->at( _x2_ ).range( _y1_, _y2_ ) :
                        this->at( _x2_ ).range( _y1_, _y2_ ) - this->at( _x1_ - 1 ).range( _y1_, _y2_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        constexpr
        enable_3d_range_container_base_t< U >
        element_at ( size_type const _x_, size_type const _y_, size_type const _z_ ) const noexcept
        { return range( _x_, _y_, _z_, _x_, _y_, _z_ ); }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        constexpr
        enable_3d_range_container_base_t< U >
        range ( size_type const _x1_, size_type const _y1_, size_type const _z1_,
                size_type const _x2_, size_type const _y2_, size_type const _z2_ ) const noexcept
        {
                return _x1_ == 0 ?
                        this->at( _x2_ ).range( _y1_, _z1_, _y2_, _z2_ ) :
                        this->at( _x2_ ).range( _y1_, _z1_, _y2_, _z2_ ) - this->at( _x1_ - 1 ).range( _y1_, _z1_, _y2_, _z2_ );
        }

        template< typename U = _self >
        NPL_ALWAYS_INLINE NPL_FLATTEN
        constexpr auto range () const noexcept
        {
                if constexpr( is_2d_range_container_v< U > )
                {
                        return this->at( this->size() - 1 ).range();
                }
                else
                {
                        return this->at( this->size() - 1 );
                }
        }

        constexpr void push_back ( value_type const &  _val_ ) noexcept( noexcept( value_type{           _val_   } ) );
        constexpr void push_back ( value_type       && _val_ ) noexcept( noexcept( value_type{ NPL_MOVE( _val_ ) } ) );

        template< typename... Args >
        constexpr reference emplace_back ( Args&&... _args_ ) noexcept( noexcept( value_type{ NPL_FWD( _args_ )... } ) );
};


template< typename T, size_t N >
constexpr void
prefix_array< T, N >::_update_back () noexcept
{
        if( this->size_ > 1 )
        {
                this->data_[ this->size_ - 1 ].val_ += this->data_[ this->size_ - 2 ].val_;
        }
}

template< typename T, size_t N >
constexpr
prefix_array< T, N >::prefix_array ( size_type const _count_ ) noexcept( noexcept( value_type{} ) )
        : _base()
{
        for( size_type i = 0; i < _count_; ++i )
        {
                mem::construct_at( &this->data_[ this->size_++ ].val_ );

                _update_back();
        }
}

template< typename T, size_t N >
constexpr
prefix_array< T, N >::prefix_array ( size_type const _count_, const_reference _val_ ) noexcept( noexcept( value_type( _val_ ) ) )
        : _base()
{
        for( size_type i = 0; i < _count_; ++i )
        {
                mem::construct_at( &this->data_[ this->size_++ ].val_, _val_ );

                _update_back();
        }
}

template< typename T, size_t N >
constexpr
prefix_array< T, N >::prefix_array ( std::initializer_list< value_type > _list_ ) noexcept( std::is_nothrow_copy_assignable_v< value_type > )
        : _base()
{
        auto it( this->begin() );

        for( auto read_iter( _list_.begin() ); read_iter != _list_.end(); ++read_iter, ++it )
        {
                mem::construct_at( it, *read_iter );

                this->size_++;

                _update_back();
        }
}

template< typename T, size_t N >
constexpr
prefix_array< T, N >::prefix_array ( prefix_array const & _other_ ) noexcept( std::is_nothrow_copy_constructible_v< value_type > )
        : _base()
{
        this->size_ = _other_.size_;

        for( size_type i = 0; i < this->size_; ++i )
        {
                mem::construct_at( &this->data_[ i ].val_, _other_[ i ] );
        }
}

template< typename T, size_t N >
constexpr
prefix_array< T, N >::prefix_array ( prefix_array && _other_ ) noexcept( std::is_nothrow_move_constructible_v< value_type > )
        : _base()
{
        this->size_ = _other_.size_;

        for( size_type i = 0; i < this->size_; ++i )
        {
                mem::construct_at( &this->data_[ i ].val_, NPL_MOVE( _other_[ i ] ) );
        }
}

template< typename T, size_t N >
constexpr prefix_array< T, N > &
prefix_array< T, N >::operator= ( prefix_array const & _other_ ) noexcept( std::is_nothrow_copy_assignable_v   < value_type > &&
                                                                           std::is_nothrow_copy_constructible_v< value_type > )
{
        if( &_other_ == this ) return *this;

        this->assign( _other_.begin(), _other_.end(), []( const_iterator iter ) -> const_reference { return *iter; } );

        return *this;
}

template< typename T, size_t N >
constexpr prefix_array< T, N > &
prefix_array< T, N >::operator= ( prefix_array && _other_ ) noexcept( std::is_nothrow_move_assignable_v   < value_type > &&
                                                                      std::is_nothrow_move_constructible_v< value_type > )
{
        if( &_other_ == this ) return *this;

        this->assign( _other_.begin(), _other_.end(), []( iterator iter ) -> value_type && { return NPL_MOVE( *iter ); } );

        return *this;
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"

template< typename T, size_t N >
constexpr auto &
prefix_array< T, N >::operator+= ( prefix_array const & _other_ ) noexcept
{
        NPL_CONSTEXPR_ASSERT( this->size_ == _other_.size_, "prefix_array::operator+=: operands must have matching sizes" );

        for( size_type i = 0; i < this->size_; ++i )
        {
                this->data_[ i ].val_ += _other_[ i ];
        }

        return *this;
}

template< typename T, size_t N >
constexpr auto
prefix_array< T, N >::operator+ ( prefix_array const & _other_ ) const
{
        NPL_CONSTEXPR_ASSERT( this->size_ == _other_.size_, "prefix_array::operator+: operands must have matching sizes" );

        _self res( *this );

        res += _other_;

        return res;
}

template< typename T, size_t N >
constexpr auto &
prefix_array< T, N >::operator-= ( prefix_array const & _other_ ) noexcept
{
        NPL_CONSTEXPR_ASSERT( this->size_ == _other_.size_, "prefix_array::operator-=: operands must have matching sizes" );

        for( size_type i = 0; i < this->size_; ++i )
        {
                this->data_[ i ].val_ -= _other_[ i ];
        }

        return *this;
}

template< typename T, size_t N >
constexpr auto
prefix_array< T, N >::operator- ( prefix_array const & _other_ ) const
{
        NPL_CONSTEXPR_ASSERT( this->size_ == _other_.size_, "prefix_array::operator-: operands must have matching sizes" );

        _self res( *this );

        res -= _other_;

        return res;
}

#pragma GCC diagnostic pop

template< typename T, size_t N >
NPL_NODISCARD constexpr
typename prefix_array< T, N >::value_type
prefix_array< T, N >::element_at ( size_type const _index_ ) const noexcept
{
        return range( _index_, _index_ );
}

template< typename T, size_t N >
NPL_NODISCARD constexpr
typename prefix_array< T, N >::value_type
prefix_array< T, N >::range ( size_type const _x_, size_type const _y_ ) const noexcept
{
        return  _x_ == 0           ?
                this->data_[ _y_ ].val_ :
                this->data_[ _y_ ].val_ - this->data_[ _x_ - 1 ].val_;
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"

template< typename T, size_t N >
constexpr
void
prefix_array< T, N >::push_back ( value_type const & _val_ ) noexcept( noexcept( value_type{ _val_ } ) )
{
        NPL_CONSTEXPR_ASSERT( !this->full(), "prefix_array::push_back: called on full prefix array" );

        mem::construct_at( &this->data_[ this->size_++ ].val_, _val_ );

        _update_back();
}

template< typename T, size_t N >
constexpr
void
prefix_array< T, N >::push_back ( value_type && _val_ ) noexcept( noexcept( value_type{ NPL_MOVE( _val_ ) } ) )
{
        NPL_CONSTEXPR_ASSERT( !this->full(), "prefix_array::push_back: called on full prefix array" );

        mem::construct_at( &this->data_[ this->size_++ ].val_, NPL_MOVE( _val_ ) );

        _update_back();
}

template< typename T, size_t N >
template< typename... Args >
constexpr
typename prefix_array< T, N >::reference
prefix_array< T, N >::emplace_back ( Args&&... _args_ ) noexcept( noexcept( value_type{ NPL_FWD( _args_ )... } ) )
{
        NPL_CONSTEXPR_ASSERT( !this->full(), "prefix_array::emplace_back: called on full prefix array" );

        mem::construct_at( &this->data_[ this->size_++ ].val_, NPL_FWD( _args_ )... );

        _update_back();

        return this->back();
}

#pragma GCC diagnostic pop


} // namespace npl
